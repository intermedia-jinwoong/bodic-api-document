### YamlMime:ManagedReference
items:
- uid: Bodic.Combinatorics.Combinatorics
  commentId: T:Bodic.Combinatorics.Combinatorics
  id: Combinatorics
  parent: Bodic.Combinatorics
  children:
  - Bodic.Combinatorics.Combinatorics.GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - Bodic.Combinatorics.Combinatorics.GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  langs:
  - csharp
  - vb
  name: Combinatorics
  nameWithType: Combinatorics
  fullName: Bodic.Combinatorics.Combinatorics
  type: Class
  source:
    remote:
      path: source/repos/BODIC_Development/Bodic/Combinatorics/Combinatorics.cs
      branch: main
      repo: https://github.com/intermedia-jinwoong/bodic-api-website.git
    id: Combinatorics
    path: Combinatorics/Combinatorics.cs
    startLine: 12
  assemblies:
  - Bodic
  namespace: Bodic.Combinatorics
  summary: "\nCombinatorics: Permutations, Combinations\n"
  example: []
  syntax:
    content: public static class Combinatorics
    content.vb: Public Module Combinatorics
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GetPermutationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Bodic.Combinatorics.Combinatorics
  langs:
  - csharp
  - vb
  name: GetPermutationsWithRept<T>(IEnumerable<T>, Int32)
  nameWithType: Combinatorics.GetPermutationsWithRept<T>(IEnumerable<T>, Int32)
  fullName: Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: source/repos/BODIC_Development/Bodic/Combinatorics/Combinatorics.cs
      branch: main
      repo: https://github.com/intermedia-jinwoong/bodic-api-website.git
    id: GetPermutationsWithRept
    path: Combinatorics/Combinatorics.cs
    startLine: 21
  assemblies:
  - Bodic
  namespace: Bodic.Combinatorics
  summary: "\nPermutations with repetition.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<T>> GetPermutationsWithRept<T>(IEnumerable<T> list, int length)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: length
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    content.vb: Public Shared Function GetPermutationsWithRept(Of T)(list As IEnumerable(Of T), length As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept*
  nameWithType.vb: Combinatorics.GetPermutationsWithRept(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: GetPermutationsWithRept(Of T)(IEnumerable(Of T), Int32)
- uid: Bodic.Combinatorics.Combinatorics.GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Bodic.Combinatorics.Combinatorics.GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GetPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Bodic.Combinatorics.Combinatorics
  langs:
  - csharp
  - vb
  name: GetPermutations<T>(IEnumerable<T>, Int32)
  nameWithType: Combinatorics.GetPermutations<T>(IEnumerable<T>, Int32)
  fullName: Bodic.Combinatorics.Combinatorics.GetPermutations<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: source/repos/BODIC_Development/Bodic/Combinatorics/Combinatorics.cs
      branch: main
      repo: https://github.com/intermedia-jinwoong/bodic-api-website.git
    id: GetPermutations
    path: Combinatorics/Combinatorics.cs
    startLine: 36
  assemblies:
  - Bodic
  namespace: Bodic.Combinatorics
  summary: "\nPermutations without repetition.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<T>> GetPermutations<T>(IEnumerable<T> list, int length)
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: length
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    content.vb: Public Shared Function GetPermutations(Of T)(list As IEnumerable(Of T), length As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: Bodic.Combinatorics.Combinatorics.GetPermutations*
  nameWithType.vb: Combinatorics.GetPermutations(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Bodic.Combinatorics.Combinatorics.GetPermutations(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: GetPermutations(Of T)(IEnumerable(Of T), Int32)
- uid: Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GetCombinationsWithRept``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Bodic.Combinatorics.Combinatorics
  langs:
  - csharp
  - vb
  name: GetCombinationsWithRept<T>(IEnumerable<T>, Int32)
  nameWithType: Combinatorics.GetCombinationsWithRept<T>(IEnumerable<T>, Int32)
  fullName: Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: source/repos/BODIC_Development/Bodic/Combinatorics/Combinatorics.cs
      branch: main
      repo: https://github.com/intermedia-jinwoong/bodic-api-website.git
    id: GetCombinationsWithRept
    path: Combinatorics/Combinatorics.cs
    startLine: 51
  assemblies:
  - Bodic
  namespace: Bodic.Combinatorics
  summary: "\nCombinations with repetition.\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<IEnumerable<T>> GetCombinationsWithRept<T>(IEnumerable<T> list, int length)
          where T : IComparable
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: length
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    content.vb: Public Shared Function GetCombinationsWithRept(Of T As IComparable)(list As IEnumerable(Of T), length As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept*
  nameWithType.vb: Combinatorics.GetCombinationsWithRept(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: GetCombinationsWithRept(Of T)(IEnumerable(Of T), Int32)
- uid: Bodic.Combinatorics.Combinatorics.GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Bodic.Combinatorics.Combinatorics.GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  id: GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Bodic.Combinatorics.Combinatorics
  langs:
  - csharp
  - vb
  name: GetCombinations<T>(IEnumerable<T>, Int32)
  nameWithType: Combinatorics.GetCombinations<T>(IEnumerable<T>, Int32)
  fullName: Bodic.Combinatorics.Combinatorics.GetCombinations<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: source/repos/BODIC_Development/Bodic/Combinatorics/Combinatorics.cs
      branch: main
      repo: https://github.com/intermedia-jinwoong/bodic-api-website.git
    id: GetCombinations
    path: Combinatorics/Combinatorics.cs
    startLine: 66
  assemblies:
  - Bodic
  namespace: Bodic.Combinatorics
  summary: "\nGet Combinations without repetition.\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<IEnumerable<T>> GetCombinations<T>(IEnumerable<T> list, int length)
          where T : IComparable
    parameters:
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ''
    - id: length
      type: System.Int32
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
      description: ''
    content.vb: Public Shared Function GetCombinations(Of T As IComparable)(list As IEnumerable(Of T), length As Integer) As IEnumerable(Of IEnumerable(Of T))
  overload: Bodic.Combinatorics.Combinatorics.GetCombinations*
  nameWithType.vb: Combinatorics.GetCombinations(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Bodic.Combinatorics.Combinatorics.GetCombinations(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: GetCombinations(Of T)(IEnumerable(Of T), Int32)
references:
- uid: Bodic.Combinatorics
  commentId: N:Bodic.Combinatorics
  name: Bodic.Combinatorics
  nameWithType: Bodic.Combinatorics
  fullName: Bodic.Combinatorics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept*
  commentId: Overload:Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept
  name: GetPermutationsWithRept
  nameWithType: Combinatorics.GetPermutationsWithRept
  fullName: Bodic.Combinatorics.Combinatorics.GetPermutationsWithRept
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Bodic.Combinatorics.Combinatorics.GetPermutations*
  commentId: Overload:Bodic.Combinatorics.Combinatorics.GetPermutations
  name: GetPermutations
  nameWithType: Combinatorics.GetPermutations
  fullName: Bodic.Combinatorics.Combinatorics.GetPermutations
- uid: Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept*
  commentId: Overload:Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept
  name: GetCombinationsWithRept
  nameWithType: Combinatorics.GetCombinationsWithRept
  fullName: Bodic.Combinatorics.Combinatorics.GetCombinationsWithRept
- uid: Bodic.Combinatorics.Combinatorics.GetCombinations*
  commentId: Overload:Bodic.Combinatorics.Combinatorics.GetCombinations
  name: GetCombinations
  nameWithType: Combinatorics.GetCombinations
  fullName: Bodic.Combinatorics.Combinatorics.GetCombinations
